class Node(object):
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

class BinaryTree(object):
    def __init__(self, root):
        self.root = Node(root)
        self.rightmost = self.rightmostnode()
        
    def rightmostnode(self):
        curr = self.root
        while curr.right :
            curr = curr.right
        return curr
        
    def search(self, find_val, curr):
        
        if curr.value == find_val :
            return True
        if curr.left != None : return self.search( find_val, curr.left)
        if curr.right != None : return self.search( find_val, curr.right)
        if curr == self.rightmost :
            return False
        return False

    def print_tree(self, curr):
        if curr : 
            if curr == self.rightmost : print str(curr.value)
            else : print '-',str(curr.value)
            self.print_tree(curr.left)
            self.print_tree(curr.right)
        
        """Print out all tree nodes
        as they are visited in
        a pre-order traversal."""
        return ""

    def preorder_search(self, start, find_val):
        """Helper method - use this to create a 
        recursive search solution."""
        return False

    def preorder_print(self, start, traversal):
        """Helper method - use this to create a 
        recursive print solution."""
        return traversal


# Set up tree
tree = BinaryTree(1)
tree.root.left = Node(2)
tree.root.right = Node(3)
tree.root.left.left = Node(4)
tree.root.left.right = Node(5)

# Test search
# Should be True
print tree.search(4, tree.root)
# Should be False
print tree.search(6, tree.root)

# Test print_tree
# Should be 1-2-4-5-3
print tree.print_tree(tree.root)
